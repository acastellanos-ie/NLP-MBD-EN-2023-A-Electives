http://dallape.lbl.gov/Matlab%20code/

              Brief Guide to the gene expression analysis code

                         Eddie Moler, March 30, 2000

   This document contains a brief guide to the organization of the files
   and code for the gene expression analysis written and carried out by
   Eddie Moler from 6/99 thru 3/00. It is not a tutorial on the use of
   matlab, autoclass, or the methods which have been developed for
   analyzing gene expression patterns.

Basic File Structure

   The base directory is /home/dallape2/eddie/mRNA_express_analysis. Login
   to dallape.lbl.gov, change directory to that one, and type 'matlab' to
   get started.

   The matlab routines are all in one subdirectory called 'matfiles/'.
   Figures generated by graphing routines are usually saved in 'figs/'.
   The 'AC/' subdirectory contains autoclass and the input and output
   files for autoclass runs. The matlab routines are documented at the top
   of each subroutine's file. A description of each routine, its arguments
   and return values can be obtained at the matlab command line by typing

   >>help routinename

Dataflow

   The dataflow chart shows the principle routines and how the returned
   variables of one are the arguments to the next. Once the raw data have
   been read in and stored as matlab variables, all operations happen on
   the matlab variables. The variables are stored in matlab binary format
   using the matlab 'save' and 'load' commands. These variables are stored
   in subdirectories of the base directory with obvious names. The raw
   data files are also stored in these subdirectories. To load a
   particular variable for subsequent operations, use the standard matlab
   load command:

   >> load 'subdirectory/file' variable1 variable2 ...

Analyses To Date

   The subdirectory, variable names and files for the yeast, colon cancer,
   leukemia , and test data analyses are given below.

   There are three principle types of data structures, all of which are
   matlab variables: datasets, classes, and categories. The datasets are
   representations of the expression data, including labels for each case
   and attribute. Each row represents a case and each column an attribute.
   Classes store model parameters which have been generated by AutoClass.
   Categories are database representations of functional category
   assignments, etc. Combined variables are generated by combining the
   principle variable types and are used in many of the analysis and
   graphing routines.

   The subdirectory and file where variables are stored are given in
   parentheses after each variable in the description below:

    Yeast Analysis

     * Yds04 (Yeast_data/Yds04) - dataset variable of expression levels
       for Spellman data
     * Yds04ac01md01 (Yeast_data/Yds04) - classes variable with the
       autoclass model trained on Yds04
     * Ys02 (YPD/Ys) - category variable containing the YPD database of
       transcription factors
     * Yds04Ys02ac01md01(Yeast_data/Yds04) - combined variable generated
       by geneXclasscateg routine from Ys02 , Yds04, and Yds04ac01md01.
       Used as input for graphing fractional class membership with the
       geneXplotclasscateg routine
     * Ps02 (Yeast_data/Ps) - category variable containing the Spellman
       assignment of genes to specific cell cycle points
     * Yds04Ps02ac01md01(Yeast_data/Yds04) - combined variable generated
       by geneXclasscateg routine from Ps02, Yds04, and Yds04ac01md01. Can
       be used as input to the fractional class membership graphing
       routine geneXplotclasscateg
     * Ms03 (MIPS/Ms) - category variable of Mips database of functional
       categories
     * Yds04Ms03ac01md01 (Yeast_data/Yds04)- combined variable generated
       by geneXclasscateg using the Ms03, Yds04, and Yds04ac01md01



    Colon Cancer Analysis

     * Cr03(Colon_data/Cr) - dataset variable of expression levels for
       Alon data. The data are normalized by chip as described in the Alon
       paper. This data set is rotated relative to the Yeast data because
       we cluster patients by gene, rather than genes by patient.
     * Cr03ac01md01(Colon_data/Cr) - classes variable with autoclass
       model.
     * Cr03ac0101ac0101(Colon_data/Cr) - combined variable which contains
       the joint density table generated from Cr03ac01md01 using the 'old'
       formula and summing over data.
     * Cr06(Colon_data/Cr) - dataset variable that contains the genes
       (columns) of Cr03 but reordered by the sum of the joint density in
       Cr03ac0101ac0101.



    Leukemia Analysis

     * Lr05(ALL_AML/Lr) - dataset variable with Golub data
     * Lr05ac01md01 (ALL_AML/Lr) - autoclass model of data
     * Lr05ac0101ac0101_jt0(ALL_AML/Lr) - combined variable with joint
       density table using old style formula
     * Lr08 (ALL_AML/Lr) - dataset variable with genes reorderd on old
       formula joint density
     * Lr05ac0101ac0101_jt1(ALL_AML/Lr) - combined variable with joint
       density table using new formula
     * Lr05sc01(ALL_AML/Lr) - classes variable with model from supervised
       Bayes training
     * Lr05sc0101sc0101(ALL_AML/Lr) - combined variable with the joint
       density table from the model Lr05sc01
     * Lr09(ALL_AML/Lr) - dataset variable with genes reordered by joint
       density Lr05sc0101sc0101.
     * L02 (ALL_AML/Lr) - category variable with ALL/AML membership listed
     * Lr05L02(ALL_AML/Lr) - combined variable with category membership
       for each sample in Lr05 by AML/ALL


    Test Data

   The test data is used to verify the code and to illustrate the methods
   with 'fake' data.
     * tdat04(Other_data/tdat) - a data set with three patterns. The noise
       is randomly generated and added to the patterns with an std of 0.1.
       Ther are 300 cases of the pattern which is hi-lo-hi, 200 cases of
       lo-hi-lo, and 100 cases of lo-hi.
     * tdat04ac01md01(Other_data/tdat) - a classes variable with the
       autoclass model learned from tdat04.
     * tdat04T01(Other_data/tdat) - a category variable with class
       membership labels for each case.
     * tdat04ac0101ac0101(Other_data/tdat) - a combined variable with the
       joint density table from tdat04ac01md01.
     * tdat04sc01(Other_data/tdat) - a classes variable with a supervised
       learning model.


 Basic Operations Using the GUI

   A primitive gui that gives an interface to some of the basic operations
   can be started by type 'ACcntrl' at the matlab prompt. The interface
   operates on variables which have been loaded by using the matlab load
   command as described above. The gui code is in a single file
   matfiles/ACcntrl_fun.m. To see what matlab routines are called, inspect
   this code.

    The buttons

   Each button and what it does is listed below:
     * Update Lists - in order to see newly loaded variables in the
       selection lists, press this button. (there must be some programming
       trick to have this happen automatically when the menu is activated,
       but I have not found it)
     * Export Data - dumps the data to a text file. A selection of formats
       is presented in a dialog box. A valid dataset must be selected. The
       text file is put in the current directory. The filename is the
       dataset variable name plus a post-fix which depends on the format
       selected. e.g. 'ming' format for variable 'dvname' would be
       'dvname_m.txt' .
     * Data->AC input - generates autoclass input files from a data set.
       The name base for the input files will be requested. The path for
       the saved files is implicitly ./AC/ A series of dialog boxes will
       allow setting the various parameters of the autoclass run. Consult
       the autoclass documentation for details of the options.
     * Run Autoclass - starts an autoclass job. Prompts for name base for
       the model files and the database files. The extensions and path are
       implicitly defined, so just the filenames are necessary. The
       default host is local. Otherwise, you must have the host in your
       .rhosts file.
     * Genereate Report - once autoclass has finished running, you must
       generate the report files. A dialog box with all of the candidate
       files in the ./AC/ directory is presented for selection.
     * Load Report - loads the selected report file into matlab. The
       resulting variable is based on the filename of the report and is
       placed in the main workspace.
     * Plot class - plot the 'green/red' plots with attribute influence,
       etc. The 'Select a Class' menu lets you select which class to plot.
       The 'Threshold' value sets the class membership threshold for
       plotting. The eps files are saved to the figs/ subdirectory
     * Plot all - like plot class but creates a window for each class in
       the model
     * Plot/Print all - like Plot all but sends the graphs to the printer
       'lsd29'
     * Export Class- produce lists of cases and class membership
       probabilities in tab-delimited text format. There are severalformat
       options. Format 'classrep_yeast' is the basic format for genes
       clustered by sample and classrep_rubin is basic for samples
       clustered by genes. Type 'help geneXAC2txt' to see what all of the
       options mean. The file is put in the current directory. The
       filename is the classes variable name plus a post-fix which depends
       on the format.
     * Graph model - produces the graph of each expression pattern and
       gives the dotted-lines depicting the widths of the distributions
     * Cross Classes - creates the joint density table for a selected
       model and data set. The resulting variable is CvnameCvname. To find
       what the different kinds of joint density options are, type 'help
       geneXcrossclass' at the matlab prompt


   Additional routines can be found in the dataflow chart. and in the
   m-files in subdirectory 'matfiles/'. Use matlab help to examine the
   call. This code was constantly evolving research code and is not really
   set up for export to a user. However, the guidelines given above should
   be useful for getting some use out of it and to explore the ideas
   further.


   EddieM
